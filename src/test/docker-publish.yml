name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]

env:
  # Use docker.io for Docker Hub if empty
#  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  TAG: 'latest'


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
        
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
         path: ~/.m2/repository
         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
         restore-keys: |
          ${{ runner.os }}-maven-
          
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v12
        with:
          repositories: '[{ "id": "github", "name": "DCSA Backend repo", "url": "https://maven.pkg.github.com/dcsaorg/DCSA-Core", "releases": { "enabled": "true" }, "snapshots": { "enabled": "true" } }]'
          servers: '[{ "id": "github", "username": "${{ secrets.DCSA_USER }}", "password": "${{ secrets.DCSA_PACKAGES_PAT }}" }]'


        
#      - name: Checkout dcsaorg/DCSA-TNT
#        uses: actions/checkout@v2
#        with:
#          repository: dcsaorg/DCSA-TNT
#          ref: 0.0.1-reactive
#          token: ${{ secrets.REPO_ACCESS_PAT }}
#          path: DCSA-TNT
#
#      - name: Modify POM for DCSA-TNT
#        run: |
#          cd DCSA-TNT
#          sed -i 's/<distributionManagement>/<!--distributionManagement>/' pom.xml && sed -i 's/<\/distributionManagement>/<\/distributionManagement-->/' pom.xml
#          sed -i 's/<plugins>/<!--plugins>/' pom.xml && sed -i 's/<\/plugins>/<\/plugins-->/' pom.xml
#          cat pom.xml
#          echo ${{github.actor}}
         
#      - name: Build DCSA-TNT
#        run: cd DCSA-TNT && mvn install -DskipTests -X
        
      - name: build Toolkit
        run:  mvn -B package -DskipTests -X

      # INstall Node on the runner
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      # Install the newman command line utility and also install the html extra reporter
      - name: Install newman
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra


      # Make directory to upload the test results
      - name: Make Directory for results
        run: mkdir -p testResults

      # Run the POSTMAN collection
      - name: Run POSTMAN collection
        run: |
          newman run https://www.getpostman.com/collections/2b9915526c61e90fd724 -r htmlextra --reporter-htmlextra-export testResults/htmlreport.html --reporter-htmlextra-darkTheme  > testResults/runreport1.html


      # Upload the contents of Test Results directory to workspace
      - name: Output the run Details
        uses: actions/upload-artifact@v2
        with:
          name: RunReports
          path: testResults


#      - name: Extract Build tag
#        id: buildtag
#        run:  echo "TAG=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)">> $GITHUB_ENV

      # Build and push Docker image
      # https://github.com/marketplace/actions/docker-build-push-action
#      - name: Build and push Docker image
#        uses: mr-smithers-excellent/docker-build-push@v5
#        with:
#          image: dcsa-ctk-consumer
#          tags: ${{ env.TAG }}, latest
#          registry: ghcr.io
#          githubOrg: dcsaorg
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#          addLatest: ${{ true }}
